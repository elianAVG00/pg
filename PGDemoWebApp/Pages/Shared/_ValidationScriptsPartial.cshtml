<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const merchantSelect = document.getElementById('csMerchantId');
        const productSelect = document.getElementById('csProductId');

        // Lógica para habilitar/deshabilitar el select de productos
        // y para potencialmente actualizar el Barcode visualmente si cambia el merchant
        // (aunque el valor real se asignará en el backend)
        function handleMerchantChange() {
            const selectedMerchantId = merchantSelect ? merchantSelect.value : null;
            if (productSelect) {
                productSelect.disabled = !selectedMerchantId;
                if (!selectedMerchantId) {
                     productSelect.value = ""; // Resetear si no hay merchant
                }
            }
            // Actualizar display del Barcode (solo visual, el C# lo calcula al enviar)
            const barCodeDisplaySpan = document.getElementById('csBarCodeDisplay');
            if (barCodeDisplaySpan && merchantSelect && @Json.Serialize(Model.FullServicesData)) {
                 const merchantsData = @Json.Serialize(Model.FullServicesData);
                 const selectedMerchantData = merchantsData.find(m => m.id === selectedMerchantId);
                 if (selectedMerchantData && selectedMerchantData.barCode) {
                      barCodeDisplaySpan.textContent = selectedMerchantData.barCode;
                 } else if (selectedMerchantId) {
                      barCodeDisplaySpan.textContent = `BARCODE_PARA_${selectedMerchantId.toUpperCase()}`;
                 }
                 else {
                      barCodeDisplaySpan.textContent = "-Seleccione un merchant-";
                 }
            }
        }

        async function fetchAndPopulateProducts(merchantId) {
            if (!merchantId) {
                productSelect.innerHTML = '<option value="">Seleccione un Producto (primero elija Merchant)</option>';
                productSelect.disabled = true;
                return;
            }

            productSelect.disabled = true; // Deshabilitar mientras carga
            productSelect.innerHTML = '<option value="">Cargando productos...</option>';

            const getProductsUrl = `?handler=ProductsForMerchant&merchantId=${encodeURIComponent(merchantId)}`;

            const response = await fetch(getProductsUrl, { method: 'GET', headers: {}});

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Error HTTP ${response.status} al cargar productos`);
            }

            const products = await response.json();
            productSelect.innerHTML = '<option value="">Seleccione un Producto</option>'; // Limpiar "Cargando..."
            if (products && products.length > 0) {
                products.forEach(product => {
                    const option = document.createElement('option');
                    option.value = product.id; // Asumiendo que el JSON devuelto tiene 'id' y 'name'
                    option.textContent = product.name;
                    productSelect.appendChild(option);
                });
                productSelect.disabled = false;
            } else {
                productSelect.innerHTML = '<option value="">No hay productos para este Merchant</option>';
                productSelect.disabled = true;
            }

        }

        function updateAutomaticFields() {
            if (epcDisplaySpan && (!epcDisplaySpan.textContent || !epcDisplaySpan.textContent.trim().startsWith("7DGFWEG"))) {
                    const randomSuffix = Math.random().toString(36).substring(2, 9).toUpperCase();
                    epcDisplaySpan.textContent = `7DGFWEG${randomSuffix}`;
            }

            if (barCodeDisplaySpan && merchantSelect && @Json.Serialize(Model.FullServicesData)) {
                    const merchantsData = @Json.Serialize(Model.FullServicesData);
                    const selectedMerchantValue = merchantSelect.value;
                    const selectedMerchantData = merchantsData.find(m => m.id === selectedMerchantValue);
                    if (selectedMerchantData && selectedMerchantData.barCode) {
                        barCodeDisplaySpan.textContent = selectedMerchantData.barCode;
                    } else if (selectedMerchantValue) {
                        barCodeDisplaySpan.textContent = `BARCODE_PARA_${selectedMerchantValue.toUpperCase()}`;
                    }
                    else {
                        barCodeDisplaySpan.textContent = "-Seleccione un merchant-";
                    }
            }
        }

        if (merchantSelect) {
            merchantSelect.addEventListener('change', function () {
                    fetchAndPopulateProducts(this.value);
                    updateAutomaticFields(); // Actualizar barcode si cambia el merchant
            });

            // Carga inicial de productos si ya hay un merchant seleccionado (ej. postback con error)
            if (merchantSelect.value) {
                // Si Model.Products ya tiene datos (por un postback con error), los usamos.
                // Si no, intentamos cargar. Esto es para evitar una llamada AJAX innecesaria si los datos ya están.
                if(productSelect && productSelect.options.length > 1 && productSelect.value !== "") {
                    productSelect.disabled = false;
                } else {
                    fetchAndPopulateProducts(merchantSelect.value);
                }
            } else {
                productSelect.disabled = true;
            }

            handleMerchantChange();
        }

        updateAutomaticFields();
    });
</script>