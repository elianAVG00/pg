//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PGDataAccess.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    
    using System.Linq;
    using System.Data.Entity.Core.Objects.DataClasses;

    public partial class PGDataEntities : DbContext
    {
        public PGDataEntities()
            : base("name=PGDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AnnulmentJobLog> AnnulmentJobLog { get; set; }
        public DbSet<AnnulmentRequest> AnnulmentRequest { get; set; }
        public DbSet<AnnulmentResultInfo> AnnulmentResultInfo { get; set; }
        public DbSet<AnnulmentValidatorComm> AnnulmentValidatorComm { get; set; }
        public DbSet<Claimer> Claimer { get; set; }
        public DbSet<CommerceItemClaim> CommerceItemClaim { get; set; }
        public DbSet<PaymentClaim> PaymentClaim { get; set; }
        public DbSet<PaymentClaimStatus> PaymentClaimStatus { get; set; }
        public DbSet<AppConfig> AppConfig { get; set; }
        public DbSet<CarpendiProccess> CarpendiProccess { get; set; }
        public DbSet<CarpendiStats> CarpendiStats { get; set; }
        public DbSet<Channels> Channels { get; set; }
        public DbSet<Clients> Clients { get; set; }
        public DbSet<Configurations> Configurations { get; set; }
        public DbSet<Currency> Currency { get; set; }
        public DbSet<DocType> DocType { get; set; }
        public DbSet<ExternalApp> ExternalApp { get; set; }
        public DbSet<JobRunLog> JobRunLog { get; set; }
        public DbSet<Language> Language { get; set; }
        public DbSet<Module> Module { get; set; }
        public DbSet<ModuleCode> ModuleCode { get; set; }
        public DbSet<MonitorFilesReportProcess> MonitorFilesReportProcess { get; set; }
        public DbSet<MonitorFilesReportRecords> MonitorFilesReportRecords { get; set; }
        public DbSet<MonitorPaywayBackOfficeTransactions> MonitorPaywayBackOfficeTransactions { get; set; }
        public DbSet<MonitorSPSBatchProcess> MonitorSPSBatchProcess { get; set; }
        public DbSet<MonitorSPSBatchProcessFiles> MonitorSPSBatchProcessFiles { get; set; }
        public DbSet<MonitorSPSBatchProcessTransactions> MonitorSPSBatchProcessTransactions { get; set; }
        public DbSet<MonitorSyncroProcess> MonitorSyncroProcess { get; set; }
        public DbSet<MonitorSyncroProcessRecords> MonitorSyncroProcessRecords { get; set; }
        public DbSet<ProductCarpendi> ProductCarpendi { get; set; }
        public DbSet<ProductCentralizer> ProductCentralizer { get; set; }
        public DbSet<Products> Products { get; set; }
        public DbSet<ProductSPSBatch> ProductSPSBatch { get; set; }
        public DbSet<ProductsValidators> ProductsValidators { get; set; }
        public DbSet<Rol> Rol { get; set; }
        public DbSet<Services> Services { get; set; }
        public DbSet<ServicesConfig> ServicesConfig { get; set; }
        public DbSet<Validators> Validators { get; set; }
        public DbSet<VersionLog> VersionLog { get; set; }
        public DbSet<Banks> Banks { get; set; }
        public DbSet<ClaimOperations> ClaimOperations { get; set; }
        public DbSet<Claims> Claims { get; set; }
        public DbSet<ClaimStatus> ClaimStatus { get; set; }
        public DbSet<ClaimTypes> ClaimTypes { get; set; }
        public DbSet<ConfigurationDefaultValues> ConfigurationDefaultValues { get; set; }
        public DbSet<ConfigurationDetails> ConfigurationDetails { get; set; }
        public DbSet<Countries> Countries { get; set; }
        public DbSet<Currencies> Currencies { get; set; }
        public DbSet<CustomMessages> CustomMessages { get; set; }
        public DbSet<DocumentTypes> DocumentTypes { get; set; }
        public DbSet<Languages> Languages { get; set; }
        public DbSet<NpsServiceRequests> NpsServiceRequests { get; set; }
        public DbSet<NpsServiceResponseQueryTrxs> NpsServiceResponseQueryTrxs { get; set; }
        public DbSet<NpsServiceResponses> NpsServiceResponses { get; set; }
        public DbSet<Refunds> Refunds { get; set; }
        public DbSet<RefundsRecords> RefundsRecords { get; set; }
        public DbSet<SalePoints> SalePoints { get; set; }
        public DbSet<SalePointServices> SalePointServices { get; set; }
        public DbSet<ServiceChannels> ServiceChannels { get; set; }
        public DbSet<ServiceProducts> ServiceProducts { get; set; }
        public DbSet<SpsBatch> SpsBatch { get; set; }
        public DbSet<SpsServiceRequests> SpsServiceRequests { get; set; }
        public DbSet<SpsServiceResponses> SpsServiceResponses { get; set; }
        public DbSet<StatusSvcLogs> StatusSvcLogs { get; set; }
        public DbSet<Transactions> Transactions { get; set; }
        public DbSet<ValidatorMessages> ValidatorMessages { get; set; }
        public DbSet<WebSvcMethodParams> WebSvcMethodParams { get; set; }
        public DbSet<WebSvcMethods> WebSvcMethods { get; set; }
        public DbSet<NotificationConfig> NotificationConfig { get; set; }
        public DbSet<NotificationLog> NotificationLog { get; set; }
        public DbSet<NotificationTemplate> NotificationTemplate { get; set; }
        public DbSet<StatusTemplate> StatusTemplate { get; set; }
        public DbSet<TicketLog> TicketLog { get; set; }
        public DbSet<TransactionTicket> TransactionTicket { get; set; }
        public DbSet<CommerceItems> CommerceItems { get; set; }
        public DbSet<PaymentValidatorComm> PaymentValidatorComm { get; set; }
        public DbSet<ReportJobLog> ReportJobLog { get; set; }
        public DbSet<TransactionAdditionalInfo> TransactionAdditionalInfo { get; set; }
        public DbSet<TransactionResultInfo> TransactionResultInfo { get; set; }
        public DbSet<TransactionStatus> TransactionStatus { get; set; }
        public DbSet<Logs> Logs { get; set; }
        public DbSet<Pswd> Pswd { get; set; }
        public DbSet<User> User { get; set; }
        public DbSet<UserActivity> UserActivity { get; set; }
        public DbSet<UserRol> UserRol { get; set; }
        public DbSet<UserService> UserService { get; set; }
        public DbSet<ValidatorServiceConfig> ValidatorServiceConfig { get; set; }
        public DbSet<CodeMapping> CodeMapping { get; set; }
        public DbSet<GenericCode> GenericCode { get; set; }
        public DbSet<StatusCode> StatusCode { get; set; }
        public DbSet<StatusMessage> StatusMessage { get; set; }
        public DbSet<Configurations_BK_06_06> Configurations_BK_06_06 { get; set; }
        public DbSet<Configurations_BK_26_06> Configurations_BK_26_06 { get; set; }
        public DbSet<Configurations_BK_27_06> Configurations_BK_27_06 { get; set; }
        public DbSet<SpsBatchTemporalValidation> SpsBatchTemporalValidation { get; set; }
        public DbSet<Versions> Versions { get; set; }
        public DbSet<GetPrismaCodes> GetPrismaCodes { get; set; }
        public DbSet<vwGetPaymentTicketInfo> vwGetPaymentTicketInfo { get; set; }
        public DbSet<vwNpsServiceTransactions> vwNpsServiceTransactions { get; set; }
        public DbSet<vwNpsServiceTransactionsAAA> vwNpsServiceTransactionsAAA { get; set; }
    
        public virtual int MakeNewRowId(string tableName, ObjectParameter newRowId)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeNewRowId", tableNameParameter, newRowId);
        }
    
        public virtual ObjectResult<Nullable<long>> IsEPCExists(string ePC, Nullable<int> serviceId)
        {
            var ePCParameter = ePC != null ?
                new ObjectParameter("EPC", ePC) :
                new ObjectParameter("EPC", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("IsEPCExists", ePCParameter, serviceIdParameter);
        }
    
        public virtual int AutoSyncDecidir()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoSyncDecidir");
        }
    
        public virtual int CentralizerReport(string username, ObjectParameter procMonitorId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CentralizerReport", usernameParameter, procMonitorId);
        }
    
        public virtual int ConciliationReport(string username, ObjectParameter procMonitorId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConciliationReport", usernameParameter, procMonitorId);
        }
    
        public virtual int FixTransactionStatusWithoutActiveIsActual()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FixTransactionStatusWithoutActiveIsActual");
        }
    
        [EdmFunction("PGDataEntities", "fnSplit")]
        public virtual IQueryable<string> fnSplit(string input)
        {
            var inputParameter = input != null ?
                new ObjectParameter("input", input) :
                new ObjectParameter("input", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[PGDataEntities].[fnSplit](@input)", inputParameter);
        }
    
        public virtual ObjectResult<GetInformationForSPSBatchValidation_Result> GetInformationForSPSBatchValidation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInformationForSPSBatchValidation_Result>("GetInformationForSPSBatchValidation");
        }
    
        public virtual ObjectResult<GetTransactionsToSync_Result> GetTransactionsToSync(Nullable<bool> fixHistorical)
        {
            var fixHistoricalParameter = fixHistorical.HasValue ?
                new ObjectParameter("FixHistorical", fixHistorical) :
                new ObjectParameter("FixHistorical", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionsToSync_Result>("GetTransactionsToSync", fixHistoricalParameter);
        }
    
        public virtual int NpsTrxReQuery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NpsTrxReQuery");
        }
    
        public virtual int pa_ReporteDeudasDup(Nullable<System.DateTime> dateFm, Nullable<System.DateTime> dateTo, string tarjeta, string merchantId)
        {
            var dateFmParameter = dateFm.HasValue ?
                new ObjectParameter("DateFm", dateFm) :
                new ObjectParameter("DateFm", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var tarjetaParameter = tarjeta != null ?
                new ObjectParameter("Tarjeta", tarjeta) :
                new ObjectParameter("Tarjeta", typeof(string));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pa_ReporteDeudasDup", dateFmParameter, dateToParameter, tarjetaParameter, merchantIdParameter);
        }
    
        public virtual ObjectResult<string> pa_ReportePaymentFiltroMerchId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("pa_ReportePaymentFiltroMerchId");
        }
    
        public virtual ObjectResult<string> pa_ReportePaymentFiltroTarjeta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("pa_ReportePaymentFiltroTarjeta");
        }
    
        public virtual ObjectResult<pa_ReporteTraPorFecha_Result> pa_ReporteTraPorFecha(Nullable<System.DateTime> dateFm, Nullable<System.DateTime> dateTo, string tarjeta, string merchantId)
        {
            var dateFmParameter = dateFm.HasValue ?
                new ObjectParameter("DateFm", dateFm) :
                new ObjectParameter("DateFm", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var tarjetaParameter = tarjeta != null ?
                new ObjectParameter("Tarjeta", tarjeta) :
                new ObjectParameter("Tarjeta", typeof(string));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pa_ReporteTraPorFecha_Result>("pa_ReporteTraPorFecha", dateFmParameter, dateToParameter, tarjetaParameter, merchantIdParameter);
        }
    
        public virtual ObjectResult<paReporting_Pagos_Result> paReporting_Pagos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paReporting_Pagos_Result>("paReporting_Pagos");
        }
    
        public virtual ObjectResult<paSSRS_DecidirTotalesARBA_Result> paSSRS_DecidirTotalesARBA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paSSRS_DecidirTotalesARBA_Result>("paSSRS_DecidirTotalesARBA");
        }
    
        public virtual ObjectResult<paSSRS_GetCantidadByServicio_Result> paSSRS_GetCantidadByServicio()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paSSRS_GetCantidadByServicio_Result>("paSSRS_GetCantidadByServicio");
        }
    
        public virtual ObjectResult<paSSRS_PaymentAmount_Result> paSSRS_PaymentAmount(Nullable<decimal> amountTRX, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var amountTRXParameter = amountTRX.HasValue ?
                new ObjectParameter("AmountTRX", amountTRX) :
                new ObjectParameter("AmountTRX", typeof(decimal));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paSSRS_PaymentAmount_Result>("paSSRS_PaymentAmount", amountTRXParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<paSSRS_PaymentCardMask_Result> paSSRS_PaymentCardMask(string cardMask, Nullable<System.DateTime> fecha)
        {
            var cardMaskParameter = cardMask != null ?
                new ObjectParameter("CardMask", cardMask) :
                new ObjectParameter("CardMask", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paSSRS_PaymentCardMask_Result>("paSSRS_PaymentCardMask", cardMaskParameter, fechaParameter);
        }
    
        public virtual ObjectResult<paSSRS_PaymentTransactionID_Result> paSSRS_PaymentTransactionID(string transactionID, Nullable<System.DateTime> fecha)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paSSRS_PaymentTransactionID_Result>("paSSRS_PaymentTransactionID", transactionIDParameter, fechaParameter);
        }
    
        public virtual ObjectResult<paSSRS_SpsDecidirServiceResponse_Result> paSSRS_SpsDecidirServiceResponse(string operationNumber)
        {
            var operationNumberParameter = operationNumber != null ?
                new ObjectParameter("OperationNumber", operationNumber) :
                new ObjectParameter("OperationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paSSRS_SpsDecidirServiceResponse_Result>("paSSRS_SpsDecidirServiceResponse", operationNumberParameter);
        }
    
        public virtual int RenditionReport(string username, Nullable<long> serviceId, ObjectParameter procMonitorId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RenditionReport", usernameParameter, serviceIdParameter, procMonitorId);
        }
    
        public virtual ObjectResult<RenditionReportOnline_Result> RenditionReportOnline(Nullable<long> serviceId, Nullable<int> dia, Nullable<int> mes, Nullable<int> anio)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var diaParameter = dia.HasValue ?
                new ObjectParameter("Dia", dia) :
                new ObjectParameter("Dia", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("Mes", mes) :
                new ObjectParameter("Mes", typeof(int));
    
            var anioParameter = anio.HasValue ?
                new ObjectParameter("Anio", anio) :
                new ObjectParameter("Anio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RenditionReportOnline_Result>("RenditionReportOnline", serviceIdParameter, diaParameter, mesParameter, anioParameter);
        }
    
        public virtual ObjectResult<ReporteMensualValidadores_Result> ReporteMensualValidadores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteMensualValidadores_Result>("ReporteMensualValidadores");
        }
    
        public virtual ObjectResult<ReporteOperacionesSinRendirDesdeDECIDIR_Result> ReporteOperacionesSinRendirDesdeDECIDIR()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteOperacionesSinRendirDesdeDECIDIR_Result>("ReporteOperacionesSinRendirDesdeDECIDIR");
        }
    
        public virtual int ResetServicesOrderNumbers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetServicesOrderNumbers");
        }
    
        public virtual int SetSPSBatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetSPSBatch");
        }
    
        public virtual int SetStatus(Nullable<long> transactionIdPK, Nullable<int> statusCodeId, string ucode)
        {
            var transactionIdPKParameter = transactionIdPK.HasValue ?
                new ObjectParameter("TransactionIdPK", transactionIdPK) :
                new ObjectParameter("TransactionIdPK", typeof(long));
    
            var statusCodeIdParameter = statusCodeId.HasValue ?
                new ObjectParameter("StatusCodeId", statusCodeId) :
                new ObjectParameter("StatusCodeId", typeof(int));
    
            var ucodeParameter = ucode != null ?
                new ObjectParameter("ucode", ucode) :
                new ObjectParameter("ucode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetStatus", transactionIdPKParameter, statusCodeIdParameter, ucodeParameter);
        }
    
        public virtual ObjectResult<SPSBatch_GetMissingExpectedFiles_Result> SPSBatch_GetMissingExpectedFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPSBatch_GetMissingExpectedFiles_Result>("SPSBatch_GetMissingExpectedFiles");
        }
    
        public virtual int SSIS_ReportToRendition_SCT(string fecha, string client_ShortName)
        {
            var fechaParameter = fecha != null ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(string));
    
            var client_ShortNameParameter = client_ShortName != null ?
                new ObjectParameter("Client_ShortName", client_ShortName) :
                new ObjectParameter("Client_ShortName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSIS_ReportToRendition_SCT", fechaParameter, client_ShortNameParameter);
        }
    
        public virtual int SyncroTransactionsV2(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncroTransactionsV2", dateFromParameter, dateToParameter);
        }
    
        public virtual int TurnOnOff(Nullable<bool> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TurnOnOff", estadoParameter);
        }
    
        public virtual int FixMissingTRI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FixMissingTRI");
        }
    
        public virtual int pa_FixStatusTrxPayment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pa_FixStatusTrxPayment");
        }
    
        public virtual int RollBackFileReportProcess(Nullable<long> filesReportProcessId, ObjectParameter resultRollback)
        {
            var filesReportProcessIdParameter = filesReportProcessId.HasValue ?
                new ObjectParameter("FilesReportProcessId", filesReportProcessId) :
                new ObjectParameter("FilesReportProcessId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RollBackFileReportProcess", filesReportProcessIdParameter, resultRollback);
        }
    }
}
